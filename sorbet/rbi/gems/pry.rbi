# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pry/all/pry.rbi
#
# pry-0.13.1

class Pry
  def add_sticky_local(name, &block); end
  def backtrace; end
  def backtrace=(arg0); end
  def binding_stack; end
  def binding_stack=(arg0); end
  def color(*args, **, &block); end
  def color=(*args, **, &block); end
  def commands(*args, **, &block); end
  def commands=(*args, **, &block); end
  def complete(str); end
  def config; end
  def current_binding; end
  def current_context; end
  def custom_completions; end
  def custom_completions=(arg0); end
  def editor(*args, **, &block); end
  def editor=(*args, **, &block); end
  def ensure_correct_encoding!(val); end
  def eval(line, options = nil); end
  def eval_string; end
  def eval_string=(arg0); end
  def evaluate_ruby(code); end
  def exception_handler(*args, **, &block); end
  def exception_handler=(*args, **, &block); end
  def exec_hook(name, *args, &block); end
  def exit_value; end
  def extra_sticky_locals(*args, **, &block); end
  def extra_sticky_locals=(*args, **, &block); end
  def generate_prompt(prompt_proc, conf); end
  def handle_line(line, options); end
  def hooks(*args, **, &block); end
  def hooks=(*args, **, &block); end
  def initialize(options = nil); end
  def inject_local(name, value, binding); end
  def inject_sticky_locals!; end
  def input(*args, **, &block); end
  def input=(*args, **, &block); end
  def input_ring; end
  def last_dir; end
  def last_dir=(arg0); end
  def last_exception; end
  def last_exception=(exception); end
  def last_file; end
  def last_file=(arg0); end
  def last_result; end
  def last_result=(arg0); end
  def last_result_is_exception?; end
  def memory_size; end
  def memory_size=(size); end
  def output; end
  def output=(*args, **, &block); end
  def output_ring; end
  def pager; end
  def pager=(*args, **, &block); end
  def pop_prompt; end
  def print(*args, **, &block); end
  def print=(*args, **, &block); end
  def process_command(val); end
  def process_command_safely(val); end
  def prompt; end
  def prompt=(new_prompt); end
  def prompt_stack; end
  def push_binding(object); end
  def push_initial_binding(target = nil); end
  def push_prompt(new_prompt); end
  def quiet?; end
  def raise_up!(*args); end
  def raise_up(*args); end
  def raise_up_common(force, *args); end
  def repl(target = nil); end
  def reset_eval_string; end
  def run_command(val); end
  def select_prompt; end
  def self.Code(obj); end
  def self.auto_resize!; end
  def self.binding_for(target); end
  def self.cli; end
  def self.cli=(arg0); end
  def self.color(*args, **, &block); end
  def self.color=(*args, **, &block); end
  def self.commands(*args, **, &block); end
  def self.commands=(*args, **, &block); end
  def self.config; end
  def self.config=(arg0); end
  def self.configure; end
  def self.critical_section; end
  def self.current; end
  def self.current_line; end
  def self.current_line=(arg0); end
  def self.custom_completions; end
  def self.custom_completions=(arg0); end
  def self.editor(*args, **, &block); end
  def self.editor=(*args, **, &block); end
  def self.eval_path; end
  def self.eval_path=(arg0); end
  def self.exception_handler(*args, **, &block); end
  def self.exception_handler=(*args, **, &block); end
  def self.extra_sticky_locals(*args, **, &block); end
  def self.extra_sticky_locals=(*args, **, &block); end
  def self.final_session_setup; end
  def self.history(*args, **, &block); end
  def self.history=(*args, **, &block); end
  def self.hooks(*args, **, &block); end
  def self.hooks=(*args, **, &block); end
  def self.in_critical_section?; end
  def self.init; end
  def self.initial_session?; end
  def self.initial_session_setup; end
  def self.input(*args, **, &block); end
  def self.input=(*args, **, &block); end
  def self.last_internal_error; end
  def self.last_internal_error=(arg0); end
  def self.line_buffer; end
  def self.line_buffer=(arg0); end
  def self.load_file_at_toplevel(file); end
  def self.load_file_through_repl(file_name); end
  def self.load_history; end
  def self.load_plugins(*args, **, &block); end
  def self.load_rc_files; end
  def self.load_requires; end
  def self.load_traps; end
  def self.load_win32console; end
  def self.locate_plugins(*args, **, &block); end
  def self.main; end
  def self.memory_size(*args, **, &block); end
  def self.memory_size=(*args, **, &block); end
  def self.output(*args, **, &block); end
  def self.output=(*args, **, &block); end
  def self.pager(*args, **, &block); end
  def self.pager=(*args, **, &block); end
  def self.plugins(*args, **, &block); end
  def self.print(*args, **, &block); end
  def self.print=(*args, **, &block); end
  def self.prompt(*args, **, &block); end
  def self.prompt=(*args, **, &block); end
  def self.quiet; end
  def self.quiet=(arg0); end
  def self.rc_files_to_load; end
  def self.real_path_to(file); end
  def self.reset_defaults; end
  def self.run_command(command_string, options = nil); end
  def self.start(target = nil, options = nil); end
  def self.toplevel_binding; end
  def self.toplevel_binding=(arg0); end
  def self.view_clip(obj, options = nil); end
  def set_last_result(result, code = nil); end
  def should_print?; end
  def show_result(result); end
  def sticky_locals; end
  def suppress_output; end
  def suppress_output=(arg0); end
  def update_input_history(code); end
  extend Pry::Forwardable
end
class Pry::LastException < BasicObject
  def bt_index; end
  def bt_index=(arg0); end
  def bt_source_location_for(index); end
  def file; end
  def inc_bt_index; end
  def initialize(exception); end
  def line; end
  def method_missing(name, *args, &block); end
  def respond_to_missing?(name, include_all = nil); end
  def wrapped_exception; end
end
module Pry::Forwardable
  def def_private_delegators(target, *private_delegates); end
  include Forwardable
end
module Pry::Helpers
  def self.tablify(things, line_length, pry_instance = nil); end
  def self.tablify_or_one_line(heading, things, pry_instance = nil); end
  def self.tablify_to_screen_width(things, options, pry_instance = nil); end
end
module Pry::Helpers::BaseHelpers
  def colorize_code(code); end
  def find_command(name, set = nil); end
  def heading(text); end
  def highlight(string, regexp, highlight_color = nil); end
  def not_a_real_file?(file); end
  def safe_send(obj, method, *args, &block); end
  def silence_warnings; end
  def stagger_output(text, _out = nil); end
  def use_ansi_codes?; end
  extend Pry::Helpers::BaseHelpers
end
module Pry::Helpers::DocumentationHelpers
  def get_comment_content(comment); end
  def process_comment_markup(comment); end
  def process_rdoc(comment); end
  def process_yardoc(comment); end
  def process_yardoc_tag(comment, tag); end
  def self.get_comment_content(comment); end
  def self.process_comment_markup(comment); end
  def self.process_rdoc(comment); end
  def self.process_yardoc(comment); end
  def self.process_yardoc_tag(comment, tag); end
  def self.strip_comments_from_c_code(code); end
  def self.strip_leading_whitespace(text); end
  def strip_comments_from_c_code(code); end
  def strip_leading_whitespace(text); end
end
module Pry::Helpers::OptionsHelpers
  def method_object; end
  def method_options(opt); end
  def self.method_object; end
  def self.method_options(opt); end
end
module Pry::Helpers::CommandHelpers
  def absolute_index_number(line_number, array_length); end
  def absolute_index_range(range_or_number, array_length); end
  def get_method_or_raise(method_name, context, opts = nil); end
  def internal_binding?(context); end
  def one_index_number(line_number); end
  def one_index_range(range); end
  def one_index_range_or_number(range_or_number); end
  def restrict_to_lines(content, lines); end
  def set_file_and_dir_locals(file_name, pry = nil, ctx = nil); end
  def temp_file(ext = nil); end
  def unindent(dirty_text, left_padding = nil); end
  extend Pry::Helpers::CommandHelpers
  include Pry::Helpers::OptionsHelpers
end
module Pry::Helpers::Text
  def black(text); end
  def black_on_black(text); end
  def black_on_blue(text); end
  def black_on_cyan(text); end
  def black_on_green(text); end
  def black_on_magenta(text); end
  def black_on_purple(text); end
  def black_on_red(text); end
  def black_on_white(text); end
  def black_on_yellow(text); end
  def blue(text); end
  def blue_on_black(text); end
  def blue_on_blue(text); end
  def blue_on_cyan(text); end
  def blue_on_green(text); end
  def blue_on_magenta(text); end
  def blue_on_purple(text); end
  def blue_on_red(text); end
  def blue_on_white(text); end
  def blue_on_yellow(text); end
  def bold(text); end
  def bright_black(text); end
  def bright_black_on_black(text); end
  def bright_black_on_blue(text); end
  def bright_black_on_cyan(text); end
  def bright_black_on_green(text); end
  def bright_black_on_magenta(text); end
  def bright_black_on_purple(text); end
  def bright_black_on_red(text); end
  def bright_black_on_white(text); end
  def bright_black_on_yellow(text); end
  def bright_blue(text); end
  def bright_blue_on_black(text); end
  def bright_blue_on_blue(text); end
  def bright_blue_on_cyan(text); end
  def bright_blue_on_green(text); end
  def bright_blue_on_magenta(text); end
  def bright_blue_on_purple(text); end
  def bright_blue_on_red(text); end
  def bright_blue_on_white(text); end
  def bright_blue_on_yellow(text); end
  def bright_cyan(text); end
  def bright_cyan_on_black(text); end
  def bright_cyan_on_blue(text); end
  def bright_cyan_on_cyan(text); end
  def bright_cyan_on_green(text); end
  def bright_cyan_on_magenta(text); end
  def bright_cyan_on_purple(text); end
  def bright_cyan_on_red(text); end
  def bright_cyan_on_white(text); end
  def bright_cyan_on_yellow(text); end
  def bright_green(text); end
  def bright_green_on_black(text); end
  def bright_green_on_blue(text); end
  def bright_green_on_cyan(text); end
  def bright_green_on_green(text); end
  def bright_green_on_magenta(text); end
  def bright_green_on_purple(text); end
  def bright_green_on_red(text); end
  def bright_green_on_white(text); end
  def bright_green_on_yellow(text); end
  def bright_magenta(text); end
  def bright_magenta_on_black(text); end
  def bright_magenta_on_blue(text); end
  def bright_magenta_on_cyan(text); end
  def bright_magenta_on_green(text); end
  def bright_magenta_on_magenta(text); end
  def bright_magenta_on_purple(text); end
  def bright_magenta_on_red(text); end
  def bright_magenta_on_white(text); end
  def bright_magenta_on_yellow(text); end
  def bright_purple(text); end
  def bright_purple_on_black(text); end
  def bright_purple_on_blue(text); end
  def bright_purple_on_cyan(text); end
  def bright_purple_on_green(text); end
  def bright_purple_on_magenta(text); end
  def bright_purple_on_purple(text); end
  def bright_purple_on_red(text); end
  def bright_purple_on_white(text); end
  def bright_purple_on_yellow(text); end
  def bright_red(text); end
  def bright_red_on_black(text); end
  def bright_red_on_blue(text); end
  def bright_red_on_cyan(text); end
  def bright_red_on_green(text); end
  def bright_red_on_magenta(text); end
  def bright_red_on_purple(text); end
  def bright_red_on_red(text); end
  def bright_red_on_white(text); end
  def bright_red_on_yellow(text); end
  def bright_white(text); end
  def bright_white_on_black(text); end
  def bright_white_on_blue(text); end
  def bright_white_on_cyan(text); end
  def bright_white_on_green(text); end
  def bright_white_on_magenta(text); end
  def bright_white_on_purple(text); end
  def bright_white_on_red(text); end
  def bright_white_on_white(text); end
  def bright_white_on_yellow(text); end
  def bright_yellow(text); end
  def bright_yellow_on_black(text); end
  def bright_yellow_on_blue(text); end
  def bright_yellow_on_cyan(text); end
  def bright_yellow_on_green(text); end
  def bright_yellow_on_magenta(text); end
  def bright_yellow_on_purple(text); end
  def bright_yellow_on_red(text); end
  def bright_yellow_on_white(text); end
  def bright_yellow_on_yellow(text); end
  def cyan(text); end
  def cyan_on_black(text); end
  def cyan_on_blue(text); end
  def cyan_on_cyan(text); end
  def cyan_on_green(text); end
  def cyan_on_magenta(text); end
  def cyan_on_purple(text); end
  def cyan_on_red(text); end
  def cyan_on_white(text); end
  def cyan_on_yellow(text); end
  def default(text); end
  def green(text); end
  def green_on_black(text); end
  def green_on_blue(text); end
  def green_on_cyan(text); end
  def green_on_green(text); end
  def green_on_magenta(text); end
  def green_on_purple(text); end
  def green_on_red(text); end
  def green_on_white(text); end
  def green_on_yellow(text); end
  def indent(text, chars); end
  def magenta(text); end
  def magenta_on_black(text); end
  def magenta_on_blue(text); end
  def magenta_on_cyan(text); end
  def magenta_on_green(text); end
  def magenta_on_magenta(text); end
  def magenta_on_purple(text); end
  def magenta_on_red(text); end
  def magenta_on_white(text); end
  def magenta_on_yellow(text); end
  def no_color; end
  def no_pager; end
  def purple(text); end
  def purple_on_black(text); end
  def purple_on_blue(text); end
  def purple_on_cyan(text); end
  def purple_on_green(text); end
  def purple_on_magenta(text); end
  def purple_on_purple(text); end
  def purple_on_red(text); end
  def purple_on_white(text); end
  def purple_on_yellow(text); end
  def red(text); end
  def red_on_black(text); end
  def red_on_blue(text); end
  def red_on_cyan(text); end
  def red_on_green(text); end
  def red_on_magenta(text); end
  def red_on_purple(text); end
  def red_on_red(text); end
  def red_on_white(text); end
  def red_on_yellow(text); end
  def strip_color(text); end
  def white(text); end
  def white_on_black(text); end
  def white_on_blue(text); end
  def white_on_cyan(text); end
  def white_on_green(text); end
  def white_on_magenta(text); end
  def white_on_purple(text); end
  def white_on_red(text); end
  def white_on_white(text); end
  def white_on_yellow(text); end
  def with_line_numbers(text, offset, color = nil); end
  def yellow(text); end
  def yellow_on_black(text); end
  def yellow_on_blue(text); end
  def yellow_on_cyan(text); end
  def yellow_on_green(text); end
  def yellow_on_magenta(text); end
  def yellow_on_purple(text); end
  def yellow_on_red(text); end
  def yellow_on_white(text); end
  def yellow_on_yellow(text); end
  extend Pry::Helpers::Text
end
class Pry::Helpers::Table
  def ==(other); end
  def _max_width(things); end
  def _rebuild_colorless_cache; end
  def _recall_color_for(thing); end
  def _recolumn; end
  def column_count; end
  def column_count=(count); end
  def columns; end
  def fits_on_line?(line_length); end
  def initialize(items, args, pry_instance = nil); end
  def items; end
  def items=(items); end
  def rows_to_s(style = nil); end
  def to_a; end
  def to_s; end
end
module Pry::Helpers::Platform
  def self.jruby?; end
  def self.jruby_19?; end
  def self.linux?; end
  def self.mac_osx?; end
  def self.mri?; end
  def self.mri_19?; end
  def self.mri_2?; end
  def self.windows?; end
  def self.windows_ansi?; end
end
class Pry::BasicObject < BasicObject
  include Kernel
end
class Pry::Prompt
  def [](key); end
  def description; end
  def incomplete_proc; end
  def initialize(name, description, prompt_procs); end
  def name; end
  def prompt_procs; end
  def self.[](name); end
  def self.add(name, description = nil, separators = nil); end
  def self.all; end
  def wait_proc; end
end
class Pry::PluginManager
  def gem_list; end
  def initialize; end
  def load_plugins; end
  def locate_plugins; end
  def plugin_located?(plugin); end
  def plugins; end
end
class Pry::PluginManager::NoPlugin
  def initialize(name); end
  def method_missing(*); end
  def respond_to_missing?(*); end
end
class Pry::PluginManager::Plugin
  def activate!; end
  def active; end
  def active=(arg0); end
  def active?; end
  def disable!; end
  def enable!; end
  def enabled; end
  def enabled=(arg0); end
  def enabled?; end
  def gem_name; end
  def gem_name=(arg0); end
  def initialize(name, gem_name, spec, enabled); end
  def load_cli_options; end
  def name; end
  def name=(arg0); end
  def spec; end
  def spec=(arg0); end
  def supported?; end
end
class Pry::CodeObject
  def command_lookup; end
  def default_lookup; end
  def empty_lookup; end
  def initialize(str, pry_instance, options = nil); end
  def looks_like_an_instance_method?(str); end
  def lookup_super(obj, super_level); end
  def method_or_class_lookup; end
  def pry_instance; end
  def pry_instance=(arg0); end
  def safe_to_evaluate?(str); end
  def self.lookup(str, pry_instance, options = nil); end
  def sourcable_object?(obj); end
  def str; end
  def str=(arg0); end
  def super_level; end
  def super_level=(arg0); end
  def target; end
  def target=(arg0); end
  def target_self; end
  include Pry::Helpers::CommandHelpers
end
module Pry::CodeObject::Helpers
  def c_method?; end
  def c_module?; end
  def command?; end
  def module_with_yard_docs?; end
  def real_method_object?; end
end
module Pry::RescuableException
  def self.===(exception); end
end
module Pry::TooSafeException
  def self.===(exception); end
end
module Pry::UserError
end
module Pry::FrozenObjectException
  def self.===(exception); end
end
class Pry::CommandError < StandardError
end
class Pry::MethodNotFound < Pry::CommandError
end
class Pry::ObsoleteError < StandardError
end
class Pry::Hooks
  def add_hook(event_name, hook_name, callable = nil, &block); end
  def clear_event_hooks(event_name); end
  def delete_hook(event_name, hook_name); end
  def errors; end
  def exec_hook(event_name, *args, &block); end
  def get_hook(event_name, hook_name); end
  def get_hooks(event_name); end
  def hook_count(event_name); end
  def hook_exists?(event_name, hook_name); end
  def hooks; end
  def initialize; end
  def initialize_copy(_orig); end
  def merge!(other); end
  def merge(other); end
  def self.default; end
end
class Pry::InputCompleter
  def build_path(input); end
  def call(str, options = nil); end
  def ignored_modules; end
  def initialize(input, pry = nil); end
  def select_message(path, receiver, message, candidates); end
end
class Pry::Command
  def _pry_; end
  def _pry_=(arg0); end
  def after_hooks; end
  def arg_string; end
  def arg_string=(arg0); end
  def before_hooks; end
  def block; end
  def call_safely(*args); end
  def call_with_hooks(*args); end
  def captures; end
  def captures=(arg0); end
  def check_for_command_collision(command_match, arg_string); end
  def command_block; end
  def command_block=(arg0); end
  def command_name; end
  def command_options; end
  def command_set; end
  def command_set=(arg0); end
  def commands; end
  def complete(_search); end
  def context; end
  def context=(arg0); end
  def description; end
  def eval_string; end
  def eval_string=(arg0); end
  def find_hooks(event); end
  def hooks; end
  def hooks=(arg0); end
  def initialize(context = nil); end
  def interpolate_string(str); end
  def match; end
  def name; end
  def normalize_method_args(method, args); end
  def output; end
  def output=(arg0); end
  def pass_block(arg_string); end
  def process_line(line); end
  def pry_instance; end
  def pry_instance=(arg0); end
  def run(command_string, *args); end
  def self.banner(arg = nil); end
  def self.block; end
  def self.block=(arg0); end
  def self.command_name; end
  def self.command_options(arg = nil); end
  def self.command_options=(arg0); end
  def self.command_regex; end
  def self.convert_to_regex(obj); end
  def self.default_options(match); end
  def self.description(arg = nil); end
  def self.description=(arg0); end
  def self.doc; end
  def self.file; end
  def self.group(name = nil); end
  def self.inspect; end
  def self.line; end
  def self.match(arg = nil); end
  def self.match=(arg0); end
  def self.match_score(val); end
  def self.matches?(val); end
  def self.name; end
  def self.options(arg = nil); end
  def self.options=(arg0); end
  def self.source; end
  def self.source_file; end
  def self.source_line; end
  def self.state; end
  def self.subclass(match, description, options, helpers, &block); end
  def source; end
  def state; end
  def target; end
  def target=(arg0); end
  def target_self; end
  def tokenize(val); end
  def use_unpatched_symbol; end
  def void; end
  extend Pry::CodeObject::Helpers
  extend Pry::Helpers::DocumentationHelpers
  include Pry::Helpers::BaseHelpers
  include Pry::Helpers::CommandHelpers
  include Pry::Helpers::Text
end
class Pry::ClassCommand < Pry::Command
  def args; end
  def args=(arg0); end
  def call(*args); end
  def complete(search); end
  def help; end
  def options(opt); end
  def opts; end
  def opts=(arg0); end
  def process; end
  def self.doc; end
  def self.file; end
  def self.inherited(klass); end
  def self.line; end
  def self.source; end
  def self.source_file; end
  def self.source_line; end
  def self.source_location; end
  def self.source_object; end
  def setup; end
  def slop; end
  def subcommands(cmd); end
end
class Pry::BlockCommand < Pry::Command
  def call(*args); end
  def help; end
end
class Pry::NoCommandError < StandardError
  def initialize(match, owner); end
end
class Pry::CommandSet
  def [](pattern); end
  def []=(pattern, command); end
  def add_command(command); end
  def alias_command(match, action, options = nil); end
  def block_command(match, description = nil, options = nil, &block); end
  def command(match, description = nil, options = nil, &block); end
  def complete(search, context = nil); end
  def create_command(match, description = nil, options = nil, &block); end
  def delete(*searches); end
  def desc(search, description = nil); end
  def each(&block); end
  def find_command(pattern); end
  def find_command_by_match_or_listing(match_or_listing); end
  def find_command_for_help(search); end
  def helper_module; end
  def helpers(&block); end
  def import(*sets); end
  def import_from(set, *matches); end
  def initialize(*imported_sets, &block); end
  def keys; end
  def list_commands; end
  def process_line(val, context = nil); end
  def rename_command(new_match, search, options = nil); end
  def to_h; end
  def to_hash; end
  def valid_command?(val); end
  include Enumerable
  include Pry::Helpers::BaseHelpers
end
class Pry::Result
  def command?; end
  def initialize(is_command, retval = nil); end
  def retval; end
  def void_command?; end
end
class Pry::SyntaxHighlighter
  def self.highlight(code, language = nil); end
  def self.keyword_token_color; end
  def self.overwrite_coderay_comment_token!; end
  def self.tokenize(code, language = nil); end
end
class Pry::Editor
  def blocking_flag_for_editor(blocking); end
  def build_editor_invocation_string(file, line, blocking); end
  def edit_tempfile_with_content(initial_content, line = nil); end
  def editor_name; end
  def initialize(pry_instance); end
  def invoke_editor(file, line, blocking = nil); end
  def open_editor(editor_invocation); end
  def open_editor_on_jruby(editor_invocation); end
  def pry_instance; end
  def self.default; end
  def start_line_syntax_for_editor(file_name, line_number); end
  include Pry::Helpers::CommandHelpers
end
class Pry::History
  def <<(line); end
  def clear; end
  def filter(history); end
  def history_file; end
  def history_file_path; end
  def history_line_count; end
  def initialize(options = nil); end
  def invalid_readline_line?(line); end
  def load; end
  def loader; end
  def loader=(arg0); end
  def original_lines; end
  def push(line); end
  def read_from_file; end
  def save_to_file(line); end
  def saver; end
  def saver=(arg0); end
  def self.default_file; end
  def session_line_count; end
  def should_ignore?(line); end
  def to_a; end
end
class Pry::ColorPrinter < PP
  def highlight_object_literal(object_literal); end
  def inspect_object(object); end
  def pp(object); end
  def self.default(_output, value, pry_instance); end
  def self.pp(obj, output = nil, max_width = nil); end
  def text(str, max_width = nil); end
end
module Pry::ExceptionHandler
  def self.cause_text(cause); end
  def self.exception_text(exception); end
  def self.handle_exception(output, exception, _pry_instance); end
  def self.standard_error_text_for(exception); end
end
module Pry::SystemCommandHandler
  def self.default(output, command, _pry_instance); end
end
module Pry::ControlDHandler
  def self.default(pry_instance); end
end
class Pry::CommandState
  def initialize; end
  def reset(command_name); end
  def self.default; end
  def state_for(command_name); end
end
module Pry::Warning
  def self.warn(message); end
end
module Pry::Env
  def self.[](key); end
end
class Pry::Command::Ls < Pry::ClassCommand
  def error_list; end
  def no_user_opts?; end
  def options(opt); end
  def process; end
  def raise_errors_if_arguments_are_weird; end
end
module Pry::Command::Ls::JRubyHacks
  def rubbishness(name); end
  def trim_jruby_aliases(methods); end
end
module Pry::Command::Ls::MethodsHelper
  def all_methods(instance_methods = nil); end
  def format(methods); end
  def resolution_order; end
  include Pry::Command::Ls::JRubyHacks
end
module Pry::Command::Ls::Interrogatable
  def interrogatee_mod; end
  def interrogating_a_module?; end
end
class Pry::Command::Ls::Grep
  def initialize(grep_regexp); end
  def regexp; end
end
class Pry::Command::Ls::Formatter
  def color(type, str); end
  def correct_opts?; end
  def format_value(value); end
  def grep; end
  def grep=(arg0); end
  def initialize(pry_instance); end
  def output_section(heading, body); end
  def output_self; end
  def pry_instance; end
  def write_out; end
end
class Pry::Command::Ls::Globals < Pry::Command::Ls::Formatter
  def format(globals); end
  def initialize(opts, pry_instance); end
  def output_self; end
end
class Pry::Command::Ls::Constants < Pry::Command::Ls::Formatter
  def correct_opts?; end
  def format(mod, constants); end
  def initialize(interrogatee, no_user_opts, opts, pry_instance); end
  def output_self; end
  def show_deprecated_constants?; end
  include Pry::Command::Ls::Interrogatable
end
class Pry::Command::Ls::Methods < Pry::Command::Ls::Formatter
  def below_ceiling; end
  def correct_opts?; end
  def initialize(interrogatee, no_user_opts, opts, pry_instance); end
  def output_self; end
  include Pry::Command::Ls::Interrogatable
  include Pry::Command::Ls::MethodsHelper
end
class Pry::Command::Ls::SelfMethods < Pry::Command::Ls::Formatter
  def correct_opts?; end
  def initialize(interrogatee, no_user_opts, opts, pry_instance); end
  def output_self; end
  include Pry::Command::Ls::Interrogatable
  include Pry::Command::Ls::MethodsHelper
end
class Pry::Command::Ls::InstanceVars < Pry::Command::Ls::Formatter
  def correct_opts?; end
  def format(type, vars); end
  def initialize(interrogatee, no_user_opts, opts, pry_instance); end
  def output_self; end
  include Pry::Command::Ls::Interrogatable
end
class Pry::Command::Ls::LocalNames < Pry::Command::Ls::Formatter
  def correct_opts?; end
  def format(locals); end
  def initialize(no_user_opts, args, pry_instance); end
  def output_self; end
end
class Pry::Command::Ls::LocalVars < Pry::Command::Ls::Formatter
  def colorized_assignment_style(lhs, rhs, desired_width = nil); end
  def format(name_value_pairs); end
  def initialize(opts, pry_instance); end
  def output_self; end
end
class Pry::Command::Ls::LsEntity
  def constants; end
  def entities; end
  def entities_table; end
  def globals; end
  def grep(entity); end
  def initialize(opts); end
  def instance_vars; end
  def local_names; end
  def local_vars; end
  def methods; end
  def pry_instance; end
  def self_methods; end
end
class Pry::Config
  def [](attr); end
  def []=(attr, value); end
  def auto_indent; end
  def auto_indent=(arg0); end
  def collision_warning; end
  def collision_warning=(arg0); end
  def color; end
  def color=(arg0); end
  def command_completions; end
  def command_completions=(arg0); end
  def command_prefix; end
  def command_prefix=(arg0); end
  def commands; end
  def commands=(arg0); end
  def completer; end
  def completer=(arg0); end
  def control_d_handler; end
  def control_d_handler=(value); end
  def correct_indent; end
  def correct_indent=(arg0); end
  def default_rc_file; end
  def default_window_size; end
  def default_window_size=(arg0); end
  def disable_auto_reload; end
  def disable_auto_reload=(arg0); end
  def editor; end
  def editor=(arg0); end
  def exception_handler; end
  def exception_handler=(arg0); end
  def exception_whitelist; end
  def exception_whitelist=(arg0); end
  def exec_string; end
  def exec_string=(arg0); end
  def extra_sticky_locals; end
  def extra_sticky_locals=(arg0); end
  def file_completions; end
  def file_completions=(arg0); end
  def history; end
  def history=(arg0); end
  def history_file; end
  def history_file=(arg0); end
  def history_ignorelist; end
  def history_ignorelist=(arg0); end
  def history_load; end
  def history_load=(arg0); end
  def history_save; end
  def history_save=(arg0); end
  def hooks; end
  def hooks=(arg0); end
  def initialize; end
  def initialize_dup(other); end
  def input; end
  def input=(arg0); end
  def lazy_readline; end
  def ls; end
  def ls=(arg0); end
  def memory_size; end
  def memory_size=(arg0); end
  def merge!(config_hash); end
  def merge(config_hash); end
  def method_missing(method_name, *args, &_block); end
  def output; end
  def output=(arg0); end
  def output_prefix; end
  def output_prefix=(arg0); end
  def pager; end
  def pager=(arg0); end
  def print; end
  def print=(arg0); end
  def prompt; end
  def prompt=(arg0); end
  def prompt_name; end
  def prompt_name=(arg0); end
  def prompt_safe_contexts; end
  def prompt_safe_contexts=(arg0); end
  def quiet; end
  def quiet=(arg0); end
  def rc_file; end
  def rc_file=(arg0); end
  def requires; end
  def requires=(arg0); end
  def respond_to_missing?(method_name, include_all = nil); end
  def should_load_local_rc; end
  def should_load_local_rc=(arg0); end
  def should_load_plugins; end
  def should_load_plugins=(arg0); end
  def should_load_rc; end
  def should_load_rc=(arg0); end
  def should_load_requires; end
  def should_load_requires=(arg0); end
  def should_trap_interrupts; end
  def should_trap_interrupts=(arg0); end
  def system; end
  def system=(arg0); end
  def unrescued_exceptions; end
  def unrescued_exceptions=(arg0); end
  def windows_console_warning; end
  def windows_console_warning=(arg0); end
  extend Pry::Config::Attributable
end
module Pry::Config::Attributable
  def attribute(attr_name); end
end
class Pry::Config::Value
  def call; end
  def initialize(value); end
end
class Pry::Config::MemoizedValue
  def call; end
  def initialize(&block); end
end
class Pry::Config::LazyValue
  def call; end
  def initialize(&block); end
end
class Pry::Inspector
end
class Pry::Pager
  def best_available; end
  def enabled?; end
  def initialize(pry_instance); end
  def open; end
  def output; end
  def page(text); end
  def pry_instance; end
end
class Pry::Pager::StopPaging < StandardError
end
class Pry::Pager::NullPager
  def <<(str); end
  def close; end
  def height; end
  def initialize(out); end
  def print(str); end
  def puts(str); end
  def width; end
  def write(str); end
end
class Pry::Pager::SimplePager < Pry::Pager::NullPager
  def initialize(*); end
  def write(str); end
end
class Pry::Pager::SystemPager < Pry::Pager::NullPager
  def close; end
  def initialize(*); end
  def invoked_pager?; end
  def pager; end
  def self.available?; end
  def self.default_pager; end
  def write(str); end
  def write_to_pager(text); end
end
class Pry::Pager::PageTracker
  def initialize(rows, cols); end
  def line_length(line); end
  def page?; end
  def record(str); end
  def reset; end
end
class Pry::Indent
  def correct_indentation(prompt, code, overhang = nil); end
  def current_prefix; end
  def end_of_statement?(last_token, last_kind); end
  def in_string?; end
  def indent(input); end
  def indent_level; end
  def indentation_delta(tokens); end
  def initialize(pry_instance = nil); end
  def module_nesting; end
  def open_delimiters; end
  def open_delimiters_line; end
  def reset; end
  def self.indent(str); end
  def self.nesting_at(str, line_number); end
  def stack; end
  def tokenize(string); end
  def track_delimiter(token); end
  def track_module_nesting(token, kind); end
  def track_module_nesting_end(token, kind = nil); end
  include Pry::Helpers::BaseHelpers
end
class Pry::Indent::UnparseableNestingError < StandardError
end
class Pry::ObjectPath
  def complete?(segment); end
  def handle_failure(context, err); end
  def initialize(path_string, current_stack); end
  def resolve; end
end
class Pry::Output
  def <<(*objs); end
  def actual_screen_size; end
  def ansicon_env_size; end
  def decolorize_maybe(str); end
  def env_size; end
  def height; end
  def initialize(pry_instance); end
  def io_console_size; end
  def method_missing(method_name, *args, &block); end
  def nonzero_column?(size); end
  def print(*objs); end
  def pry_instance; end
  def puts(*objs); end
  def readline_size; end
  def respond_to_missing?(method_name, include_private = nil); end
  def size; end
  def tty?; end
  def width; end
  def write(*objs); end
end
class Pry::InputLock
  def __with_ownership; end
  def enter_interruptible_region; end
  def initialize; end
  def interruptible_region; end
  def leave_interruptible_region; end
  def self.for(input); end
  def self.global_lock; end
  def self.global_lock=(arg0); end
  def self.input_locks; end
  def self.input_locks=(arg0); end
  def with_ownership(&block); end
end
class Pry::InputLock::Interrupt < Exception
end
class Pry::REPL
  def calculate_overhang(current_prompt, original_val, indented_val); end
  def coolline_available?; end
  def epilogue; end
  def handle_read_errors; end
  def initialize(pry, options = nil); end
  def input(*args, **, &block); end
  def input_readline(*args); end
  def output(*args, **, &block); end
  def piping?; end
  def prologue; end
  def pry; end
  def pry=(arg0); end
  def read; end
  def read_line(current_prompt); end
  def readline_available?; end
  def repl; end
  def self.start(options); end
  def set_readline_output; end
  def start; end
  extend Pry::Forwardable
end
class Pry::Code
  def <<(line); end
  def ==(other); end
  def after(lineno, lines = nil); end
  def around(lineno, lines = nil); end
  def before(lineno, lines = nil); end
  def between(start_line, end_line = nil); end
  def code_type; end
  def code_type=(arg0); end
  def comment_describing(line_number); end
  def expression_at(line_number, consume = nil); end
  def grep(pattern); end
  def highlighted; end
  def initialize(lines = nil, start_line = nil, code_type = nil); end
  def length; end
  def max_lineno_width; end
  def method_missing(method_name, *args, &block); end
  def nesting_at(line_number); end
  def print_to_output(output, color = nil); end
  def push(line); end
  def raw; end
  def reject(&block); end
  def select(&block); end
  def self.from_file(filename, code_type = nil); end
  def self.from_method(meth, start_line = nil); end
  def self.from_module(mod, candidate_rank = nil, start_line = nil); end
  def take_lines(start_line, num_lines); end
  def to_s; end
  def with_indentation(spaces = nil); end
  def with_line_numbers(y_n = nil); end
  def with_marker(lineno = nil); end
end
