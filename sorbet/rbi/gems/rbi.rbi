# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rbi/all/rbi.rbi
#
# rbi-0.0.17

module RBI
end
class RBI::Loc
  def begin_column; end
  def begin_line(*args, **, &blk); end
  def end_column; end
  def end_line; end
  def file(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.from_ast_loc(*args, **, &blk); end
  def source(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Node
  def accept_printer(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def detach(*args, **, &blk); end
  def group_kind(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def loc(*args, **, &blk); end
  def loc=(arg0); end
  def merge_with(*args, **, &blk); end
  def oneline?(*args, **, &blk); end
  def parent_conflict_tree(*args, **, &blk); end
  def parent_scope(*args, **, &blk); end
  def parent_tree(*args, **, &blk); end
  def parent_tree=(arg0); end
  def print(*args, **, &blk); end
  def print_blank_line_before(*args, **, &blk); end
  def replace(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def string(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::Comment < RBI::Node
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def text(*args, **, &blk); end
  def text=(arg0); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::BlankLine < RBI::Comment
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::NodeWithComments < RBI::Node
  def annotations(*args, **, &blk); end
  def comments(*args, **, &blk); end
  def comments=(arg0); end
  def initialize(*args, **, &blk); end
  def merge_with(*args, **, &blk); end
  def oneline?(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::Tree < RBI::NodeWithComments
  def <<(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def add_sig_templates!(*args, **, &blk); end
  def annotate!(*args, **, &blk); end
  def deannotate!(*args, **, &blk); end
  def empty?(*args, **, &blk); end
  def group_nodes!(*args, **, &blk); end
  def index(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def merge(*args, **, &blk); end
  def nest_non_public_methods!(*args, **, &blk); end
  def nest_singleton_methods!(*args, **, &blk); end
  def nodes(*args, **, &blk); end
  def oneline?(*args, **, &blk); end
  def sort_nodes!(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::File
  def <<(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def comments(*args, **, &blk); end
  def comments=(arg0); end
  def empty?(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print(*args, **, &blk); end
  def root(*args, **, &blk); end
  def root=(arg0); end
  def strictness(*args, **, &blk); end
  def strictness=(arg0); end
  def string(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Scope < RBI::Tree
  def accept_printer(*args, **, &blk); end
  def dup_empty(*args, **, &blk); end
  def fully_qualified_name(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def print_body(*args, **, &blk); end
  def print_header(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Module < RBI::Scope
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_name(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def name=(arg0); end
  def print_header(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::Class < RBI::Scope
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_name(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def name=(arg0); end
  def print_header(*args, **, &blk); end
  def superclass_name(*args, **, &blk); end
  def superclass_name=(arg0); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::SingletonClass < RBI::Scope
  def fully_qualified_name(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print_header(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Struct < RBI::Scope
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_name(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def keyword_init(*args, **, &blk); end
  def keyword_init=(arg0); end
  def members(*args, **, &blk); end
  def members=(arg0); end
  def name(*args, **, &blk); end
  def name=(arg0); end
  def print_header(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::Const < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_name(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  def value; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Attr < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_names(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def merge_with(*args, **, &blk); end
  def names(*args, **, &blk); end
  def names=(arg0); end
  def oneline?(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def sigs(*args, **, &blk); end
  def visibility(*args, **, &blk); end
  def visibility=(arg0); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::AttrAccessor < RBI::Attr
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_names(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::AttrReader < RBI::Attr
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_names(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::AttrWriter < RBI::Attr
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_names(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Method < RBI::NodeWithComments
  def <<(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_name(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def inline_params?(*args, **, &blk); end
  def is_singleton(*args, **, &blk); end
  def is_singleton=(arg0); end
  def merge_with(*args, **, &blk); end
  def name(*args, **, &blk); end
  def name=(arg0); end
  def oneline?(*args, **, &blk); end
  def params(*args, **, &blk); end
  def sigs(*args, **, &blk); end
  def sigs=(arg0); end
  def to_s(*args, **, &blk); end
  def visibility(*args, **, &blk); end
  def visibility=(arg0); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Param < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def comments_lines(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::ReqParam < RBI::Param
  def ==(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::OptParam < RBI::Param
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def value(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::RestParam < RBI::Param
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::KwParam < RBI::Param
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::KwOptParam < RBI::Param
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  def value(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::KwRestParam < RBI::Param
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::BlockParam < RBI::Param
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Mixin < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def names(*args, **, &blk); end
  def names=(arg0); end
  def self.new(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::Include < RBI::Mixin
  def compatible_with?(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Extend < RBI::Mixin
  def compatible_with?(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Visibility < RBI::NodeWithComments
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def private?(*args, **, &blk); end
  def protected?(*args, **, &blk); end
  def public?(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def visibility(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Public < RBI::Visibility
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Protected < RBI::Visibility
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Private < RBI::Visibility
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Send < RBI::NodeWithComments
  def <<(*args, **, &blk); end
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def args(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def method(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Arg < RBI::Node
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  def value(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::KwArg < RBI::Arg
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def keyword(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Sig < RBI::Node
  def <<(*args, **, &blk); end
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def checked(*args, **, &blk); end
  def checked=(arg0); end
  def initialize(*args, **, &blk); end
  def inline_params?(*args, **, &blk); end
  def is_abstract(*args, **, &blk); end
  def is_abstract=(arg0); end
  def is_final; end
  def is_final=(arg0); end
  def is_overridable; end
  def is_overridable=(arg0); end
  def is_override; end
  def is_override=(arg0); end
  def oneline?(*args, **, &blk); end
  def params(*args, **, &blk); end
  def print_as_block(*args, **, &blk); end
  def print_as_line(*args, **, &blk); end
  def return_type(*args, **, &blk); end
  def return_type=(arg0); end
  def sig_modifiers(*args, **, &blk); end
  def type_params(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::SigParam < RBI::NodeWithComments
  def ==(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def comments_lines(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def print_comment_leading_space(*args, **, &blk); end
  def type; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::TStruct < RBI::Class
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::TStructField < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def default(*args, **, &blk); end
  def default=(arg0); end
  def fully_qualified_names(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def name=(arg0); end
  def self.new(*args, **, &blk); end
  def type; end
  def type=(arg0); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
end
class RBI::TStructConst < RBI::TStructField
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_names(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::TStructProp < RBI::TStructField
  def compatible_with?(*args, **, &blk); end
  def fully_qualified_names(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::TEnum < RBI::Class
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::TEnumBlock < RBI::NodeWithComments
  def <<(*args, **, &blk); end
  def accept_printer(*args, **, &blk); end
  def empty?(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def merge_with(*args, **, &blk); end
  def names(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Helper < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def compatible_with?(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::TypeMember < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def fully_qualified_name(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  def value; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::MixesInClassMethods < RBI::Mixin
  def compatible_with?(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::RequiresAncestor < RBI::NodeWithComments
  def accept_printer(*args, **, &blk); end
  def index_ids(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def name(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
  extend T::Sig
  include RBI::Indexable
end
class RBI::Visitor
  def self.new(*args, **, &blk); end
  def visit(*args, **, &blk); end
  def visit_all(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Index < RBI::Visitor
  def [](*args, **, &blk); end
  def index(*args, **, &blk); end
  def index_node(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def keys(*args, **, &blk); end
  def self.index(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include T::Enumerable
end
module RBI::Indexable
  def index_ids(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module RBI::Rewriters
end
class RBI::Rewriters::AddSigTemplates < RBI::Visitor
  def add_attr_sig(*args, **, &blk); end
  def add_method_sig(*args, **, &blk); end
  def add_todo_comment(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::Annotate < RBI::Visitor
  def annotate_node(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def root?(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::Deannotate < RBI::Visitor
  def deannotate_node(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::Merge
  def initialize(*args, **, &blk); end
  def merge(*args, **, &blk); end
  def self.merge_trees(*args, **, &blk); end
  def tree(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::Merge::Keep < T::Enum
end
class RBI::Rewriters::Merge::Conflict < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def left; end
  def left_name; end
  def right; end
  def right_name; end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class RBI::Rewriters::Merge::TreeMerger < RBI::Visitor
  def conflicts(*args, **, &blk); end
  def current_scope(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def make_conflict_scope(*args, **, &blk); end
  def make_conflict_tree(*args, **, &blk); end
  def previous_definition(*args, **, &blk); end
  def replace_scope_header(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::Merge::ConflictTreeMerger < RBI::Visitor
  def merge_conflict_trees(*args, **, &blk); end
  def visit(*args, **, &blk); end
  def visit_all(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
end
class RBI::MergeTree < RBI::Tree
  def conflicts(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::ConflictTree < RBI::Tree
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def left(*args, **, &blk); end
  def right; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::ScopeConflict < RBI::Tree
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def left(*args, **, &blk); end
  def oneline?(*args, **, &blk); end
  def right; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::NestSingletonMethods < RBI::Visitor
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::NestNonPublicMethods < RBI::Visitor
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::VisibilityGroup < RBI::Tree
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def oneline?(*args, **, &blk); end
  def visibility(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Rewriters::GroupNodes < RBI::Visitor
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Group < RBI::Tree
  def accept_printer(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def kind(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  extend T::Sig
end
class RBI::Group::Kind < T::Enum
end
class RBI::Rewriters::RemoveKnownDefinitions < RBI::Visitor
  def can_delete_node?(*args, **, &blk); end
  def delete_node(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def operations(*args, **, &blk); end
  def previous_definition_for(*args, **, &blk); end
  def self.remove(*args, **, &blk); end
  def visit(*args, **, &blk); end
  def visit_all(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Rewriters::RemoveKnownDefinitions::Operation < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def deleted_node; end
  def duplicate_of; end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class RBI::Rewriters::SortNodes < RBI::Visitor
  def group_rank(*args, **, &blk); end
  def node_name(*args, **, &blk); end
  def node_rank(*args, **, &blk); end
  def sort_node_names!(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::ParseError < StandardError
  def initialize(*args, **, &blk); end
  def location(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::UnexpectedParserError < StandardError
  def initialize(*args, **, &blk); end
  def last_location(*args, **, &blk); end
  def print_debug(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Parser
  def initialize(*args, **, &blk); end
  def parse(*args, **, &blk); end
  def parse_file(*args, **, &blk); end
  def parse_string(*args, **, &blk); end
  def self.parse_file(*args, **, &blk); end
  def self.parse_files(*args, **, &blk); end
  def self.parse_string(*args, **, &blk); end
  def self.parse_strings(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::ASTVisitor
  def parse_expr(*args, **, &blk); end
  def parse_name(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def visit(*args, **, &blk); end
  def visit_all(*args, **, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::TreeBuilder < RBI::ASTVisitor
  def assoc_dangling_comments(*args, **, &blk); end
  def current_scope(*args, **, &blk); end
  def current_sigs(*args, **, &blk); end
  def current_sigs_comments(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def last_node(*args, **, &blk); end
  def node_comments(*args, **, &blk); end
  def node_loc(*args, **, &blk); end
  def parse_block(*args, **, &blk); end
  def parse_const_assign(*args, **, &blk); end
  def parse_def(*args, **, &blk); end
  def parse_enum(*args, **, &blk); end
  def parse_param(*args, **, &blk); end
  def parse_requires_ancestor(*args, **, &blk); end
  def parse_scope(*args, **, &blk); end
  def parse_send(*args, **, &blk); end
  def parse_send_args(*args, **, &blk); end
  def parse_sig(*args, **, &blk); end
  def parse_struct(*args, **, &blk); end
  def parse_tstruct_prop(*args, **, &blk); end
  def parse_type_variable(*args, **, &blk); end
  def post_process(*args, **, &blk); end
  def separate_header_comments(*args, **, &blk); end
  def set_root_tree_loc(*args, **, &blk); end
  def struct_definition?(*args, **, &blk); end
  def tree(*args, **, &blk); end
  def type_variable_definition?(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::ConstBuilder < RBI::ASTVisitor
  def initialize(*args, **, &blk); end
  def names(*args, **, &blk); end
  def names=(arg0); end
  def self.visit(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::SigBuilder < RBI::ASTVisitor
  def current(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.build(*args, **, &blk); end
  def visit(*args, **, &blk); end
  def visit_send(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Printer < RBI::Visitor
  def current_indent(*args, **, &blk); end
  def dedent(*args, **, &blk); end
  def in_visibility_group; end
  def in_visibility_group=(arg0); end
  def indent(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def max_line_length(*args, **, &blk); end
  def previous_node(*args, **, &blk); end
  def print(*args, **, &blk); end
  def print_locs(*args, **, &blk); end
  def print_locs=(arg0); end
  def printl(*args, **, &blk); end
  def printn(*args, **, &blk); end
  def printt(*args, **, &blk); end
  def visit(*args, **, &blk); end
  def visit_all(*args, **, &blk); end
  def visit_file(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class RBI::Formatter
  def add_sig_templates=(*args, **, &blk); end
  def format_file(*args, **, &blk); end
  def format_tree(*args, **, &blk); end
  def group_nodes=(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def max_line_length(*args, **, &blk); end
  def max_line_length=(arg0); end
  def nest_non_public_methods=(*args, **, &blk); end
  def nest_singleton_methods=(*args, **, &blk); end
  def print_file(*args, **, &blk); end
  def sort_nodes=(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
