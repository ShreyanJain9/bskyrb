# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/standard/all/standard.rbi
#
# standard-1.27.0

module RuboCop
end
class RuboCop::Cop::Lint::AssignmentInCondition < RuboCop::Cop::Base
end
class RuboCop::DirectiveComment
end
class RuboCop::CommentConfig
  def old_initialize(processed_source); end
end
module Standard
end
class Standard::FileFinder
  def call(name, search_path); end
end
class Standard::ResolvesYamlOption
  def argv_value_for(argv, option_name); end
  def call(argv, search_path, option_name, default_file); end
  def search_argv(argv, option_name); end
end
class Standard::LoadsYamlConfig
  def arrayify(object); end
  def call(standard_yaml_path, todo_yaml_path); end
  def construct_config(yaml_path, standard_yaml, todo_path, todo_yaml); end
  def expand_ignore_config(ignore_config); end
  def load_standard_yaml(yaml_path); end
  def normalized_ruby_version(version); end
end
class Standard::MergesSettings
  def call(argv, standard_yaml); end
  def determine_command(argv); end
  def merge(standard_yaml, standard_cli_flags, rubocop_cli_flags); end
  def parse_standard_argv(argv); end
  def separate_argv(argv); end
  def without_banned(rubocop_cli_flags); end
end
class Standard::MergesSettings::Settings < Struct
  def options; end
  def options=(_); end
  def paths; end
  def paths=(_); end
  def runner; end
  def runner=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class Standard::CreatesConfigStore
  def call(standard_config); end
  def initialize; end
end
class Standard::CreatesConfigStore::AssignsRubocopYaml
  def call(config_store, standard_config); end
  def rubocop_yaml_path(desired_version); end
end
class Standard::CreatesConfigStore::SetsTargetRubyVersion
  def call(options_config, standard_config); end
  def min_target_ruby_version_supported(desired_target_ruby_version); end
  def normalize_version(version); end
end
class Standard::CreatesConfigStore::ConfiguresIgnoredPaths
  def absolute?(path); end
  def absolutify(config_root, path); end
  def call(options_config, standard_config); end
  def ignored_patterns(standard_config); end
end
class Standard::CreatesConfigStore::MergesUserConfigExtensions
  def blank_rubocop_config(example_config); end
  def call(options_config, standard_config); end
  def except(hash_or_config, keys); end
  def fake_out_rubocop_default_configuration(options_config); end
  def load_and_merge_extended_rubocop_configs(options_config, standard_config); end
  def merge_extended_rules_into_standard!(options_config, extended_config); end
  def merge_standard_and_user_all_cops!(options_config, extended_config); end
end
class Standard::Config < Struct
  def paths; end
  def paths=(_); end
  def rubocop_config_store; end
  def rubocop_config_store=(_); end
  def rubocop_options; end
  def rubocop_options=(_); end
  def runner; end
  def runner=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class Standard::BuildsConfig
  def call(argv, search_path = nil); end
  def initialize; end
end
module Standard::Runners
end
class Standard::Runners::Rubocop
  def call(config); end
  def without_parallelizing_in_stdin_mode(options); end
end
class Standard::Runners::Version
  def call(config); end
end
class Standard::Runners::VerboseVersion
  def call(config); end
end
module Standard::Lsp
end
class Standard::Lsp::Standardizer
  def capture_rubocop_stdout(config); end
  def fork_config(path, text, format:); end
  def format(path, text); end
  def initialize(config, logger); end
  def offenses(path, text); end
end
class Standard::Lsp::KillsServer
  def call(&blk); end
end
class Standard::Lsp::Routes
  def diagnostic(file_uri, text); end
  def for(name); end
  def format_file(file_uri); end
  def handle_initialize(request); end
  def handle_initialized(request); end
  def handle_method_missing(request); end
  def handle_shutdown(request); end
  def handle_unsupported_method(request, method = nil); end
  def initialize(writer, logger, standardizer); end
  def self.handle(name, &block); end
  def uri_to_path(uri); end
end
class Standard::Lsp::Logger
  def initialize; end
  def puts(message); end
  def puts_once(message); end
end
class Standard::Lsp::Server
  def initialize(config); end
  def start; end
end
class Standard::Runners::Lsp
  def call(config); end
end
class Standard::Runners::Genignore
  def call(config); end
end
class Standard::Runners::Help
  def call(config); end
end
class Standard::LoadsRunner
  def call(command); end
end
class Standard::Cli
  def initialize(argv); end
  def run; end
end
class Standard::Formatter < RuboCop::Formatter::BaseFormatter
  def determine_run_mode; end
  def file_finished(file, offenses); end
  def finished(_inspected_files); end
  def fixable_error_message(command); end
  def path_to(file); end
  def potential_fix_mode; end
  def print_fix_suggestion; end
  def print_header_once; end
  def print_todo_congratulations; end
  def print_todo_warning; end
  def started(_target_files); end
  def track_stats(offenses); end
end
module RuboCop::Cop
end
module RuboCop::Cop::Standard
end
class RuboCop::Cop::Standard::BlockSingleLineBraces < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def correction_would_break_code?(node); end
  def get_blocks(node, &block); end
  def message(node); end
  def on_block(node); end
  def on_send(node); end
  def proper_block_style?(node); end
  def replace_do_end_with_braces(corrector, loc); end
  def whitespace_after?(range, length = nil); end
  extend RuboCop::Cop::AutoCorrector
end
